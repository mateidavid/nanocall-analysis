#!/usr/bin/env python3

import argparse
import logging
import operator
import os
import sys

import numpy as np
import numpy.lib.recfunctions as rfn

output_keys = [
    ('nanocall_tag', 'PStay & PSkip'),
    ('m_corr_frac', 'MCorr'),
    ('n_corr_frac', 'NCorr'),
    ('m_idn_frac', 'MIdn'),
    ('n_idn_frac', 'NIdn'),
]

highlight_keys = {
    'n_corr_frac': 1,
    'n_idn_frac': 1,
}

opts_name = {
    'fast': '\\texttt{fast}',
    '1ss': '\\texttt{1ss}',
    '1ss-no_tt': '\\texttt{1ss-nott}',
    '2ss': '\\texttt{2ss}',
    '2ss-no_tt': '\\texttt{2ss-nott}',
}

def print_header():
    print('\\begin{tabular}{@{}' + 'l' * (len(output_keys) + 1) + '@{}}')
    print('\\toprule')
    print(' & '.join((k for _, k in output_keys)) + ' \\\\')

def print_separator():
    print('\\midrule')

def print_footer():
    print('\\botrule')
    print('\\end{tabular}')

def process_file(mapping_fn):
    a = np.genfromtxt(mapping_fn, dtype=None, names=True)
    a.sort(order='n_corr_frac')
    a = a[::-1]
    #logger.debug('a: ' + str(a[output_keys]))
    # compute highlights
    best_index = dict()
    for k in highlight_keys.keys():
        assert(k in a.dtype.names)
        if highlight_keys[k] == 0:
            best_index[k], _ = min(enumerate(a[k]), key=operator.itemgetter(1))
        else:
            best_index[k], _ = max(enumerate(a[k]), key=operator.itemgetter(1))
    for i in range(a.size):
        e = a[i]
        l = list()
        for k, _ in output_keys:
            if i > 0 and k in ['m_corr_frac', 'm_idn_frac']:
                l.append('.')
                continue
            if k == 'nanocall_tag':
                token_list = e[k].decode().split('-')
                token_dict = dict()
                for t in token_list:
                    if '_' in t:
                        t2 = t.split('_')
                        token_dict[t2[0]] = t2[1]
                assert('pstay' in token_dict)
                assert('pskip' in token_dict)
                l.append('.0' + token_dict['pstay'])
                l.append('.' + token_dict['pskip'])
            else:
                sval = str(e[k]).lstrip('0')
                # apply highlight
                if k not in highlight_keys.keys() or i != best_index[k]:
                    l.append(sval)
                else:
                    l.append('\\textbf{' + sval + '}')
        print(' & '.join(l) + ' \\\\')

if __name__ == '__main__':
    description = """
Make tex summary table for given option pack.
    """
    parser = argparse.ArgumentParser(description=description, epilog='')
    parser.add_argument('--log-level', help='log level', action='store', default='info')
    parser.add_argument('input', help='Mapping summary file.')
    args = parser.parse_args()
    numeric_log_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_log_level, int):
        raise ValueError('Invalid log level: "%s"' % args.log_level)
    logging.basicConfig(level=numeric_log_level,
                        format='%(asctime)s %(name)s.%(levelname)s %(message)s',
                        datefmt='%Y/%m/%d %H:%M:%S')
    logger = logging.getLogger(os.path.basename(__file__))
    logger.debug('args: ' + str(args))

    print_header()
    print_separator()
    process_file(args.input)
    print_footer()
