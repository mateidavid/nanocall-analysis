#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import pysam
from collections import Counter

# http://pysam.readthedocs.org/en/latest/api.html#pysam.AlignedRead.cigar
MATCH  = 0  # M
INS    = 1  # I
DEL    = 2  # D
SKIP   = 3  # N
SOFT   = 4  # S
HARD   = 5  # H
PAD    = 6  # P
EQUAL  = 7  # =
DIFF   = 8  # X

def tokenize_md(md):
    l = list()
    i = 0
    while i < len(md):
        j = i + 1
        if md[i].isdigit():
            while j < len(md) and md[j].isdigit():
                j += 1
            r = int(md[i:j])
            if r > 0:
                l.append(r)
        elif md[i].isalpha():
            while j < len(md) and md[j].isalpha():
                j += 1
            l.append(md[i:j])
        elif md[i] == '^':
            l.append('^')
        else:
            assert False
        i = j
    logger.debug('tokens: ' + str(l))
    return l

# ref: https://github.com/vsbuffalo/devnotes/wiki/The-MD-Tag-in-BAM-Files
def disambiguate(cg, md):
    if cg == None:
        return None
    logger.debug('cigar: ' + str(cg))
    logger.debug('md: ' + md)
    md_list = tokenize_md(md)
    new_cg = list()
    for t in cg:
        logger.debug('cigar_op: ' + str(t))
        if t[0] in [INS, HARD, SOFT, SKIP, PAD, EQUAL, DIFF]:
            new_cg.append(t)
            continue
        assert len(md_list) > 0
        if t[0] == DEL:
            new_cg.append(t)
            assert md_list[0] == '^'
            del md_list[0]
            assert type(md_list[0]) == str
            assert len(md_list[0]) >= t[1]
            if len(md_list[0]) == t[1]:
                del md_list[0]
            else:
                md_list[0] = md_list[0][t[1]:]
        else:
            assert t[0] == MATCH
            assert t[1] > 0
            pos = 0
            while pos < t[1]:
                assert md_list[0] != '^'
                if type(md_list[0]) == int:
                    assert md_list[0] > 0
                    if pos + md_list[0] <= t[1]:
                        new_t = (EQUAL, md_list[0])
                        pos += md_list[0]
                        del md_list[0]
                    else:
                        new_t = (EQUAL, t[1] - pos)
                        md_list[0] -= (t[1] - pos)
                        pos = t[1]
                else:
                    assert type(md_list[0]) == str
                    assert len(md_list[0]) > 0
                    if pos + len(md_list[0]) <= t[1]:
                        new_t = (DIFF, len(md_list[0]))
                        pos += len(md_list[0])
                        del md_list[0]
                    else:
                        new_t = (DIFF, t[1] - len(md_list[0]))
                        md_list[0] = md_list[0][t[1] - len(md_list[0]):]
                        pos = t[1]
                logger.debug('new_op: ' + str(new_t))
                new_cg.append(new_t)
    i = 0
    while i < len(new_cg) - 1:
        if new_cg[i][0] == new_cg[i + 1][0]:
            new_cg[i] = (new_cg[i][0], new_cg[i][1] + new_cg[i + 1][1])
            del new_cg[i + 1]
        else:
            i += 1
    return new_cg

def process_file(in_bam, out_bam):
    for aln in in_bam:
        if not aln.has_tag('MD'):
            out_bam.write(aln)
            continue
        new_cigar = disambiguate(aln.cigartuples, aln.get_tag('MD'))
        aln.cigar = new_cigar
        out_bam.write(aln)

if __name__ == "__main__":
    description = """
Replace CIGAR M operations by = and X, using MD fields.
These can be regenerated by `samtools calmd`.
    """
    parser = argparse.ArgumentParser(description=description, epilog='')
    parser.add_argument('--log-level', help='log level', action='store', default='info')
    parser.add_argument('-o', '--output', default='-', help='Output SAM file.')
    parser.add_argument('input', nargs='?', default='-', help='Input SAM/BAM file.')
    args = parser.parse_args()

    numeric_log_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_log_level, int):
        raise ValueError('Invalid log level: "%s"' % args.log_level)
    logging.basicConfig(level=numeric_log_level,
                        format='%(asctime)s %(name)s.%(levelname)s %(message)s',
                        datefmt='%Y/%m/%d %H:%M:%S')
    logger = logging.getLogger(os.path.basename(__file__))
    logger.debug('args=' + str(args))

    in_bam = pysam.Samfile(args.input)
    out_mode = 'w' + ['h', 'b'][args.output.endswith('.bam')]
    out_bam = pysam.Samfile(args.output, mode=out_mode, template=in_bam)

    process_file(in_bam, out_bam)

    in_bam.close()
    out_bam.close()
