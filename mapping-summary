#!/usr/bin/env python3

import argparse
import collections
import logging
import os
import sys
import numpy as np

def load_data(f):
    return np.genfromtxt(f.buffer, dtype=None, names=True)

def process_data(arrays, args):
    h = collections.OrderedDict(
        [
            ('total_reads', '.0f'),
            ('avg_events', '.0f')
        ] +
        [
            (rt + '_hairpin_frac', '.3f')
            for rt in ['m', 'n', 'common']
        ] +
        [
            (rt + '_avg_events', '.0f')
            for rt in ['m0', 'm1', 'n0', 'n1']
        ] +
        [
            ('m2_aln_frac', '.3f')
        ] +
        [
            (rt + st + '_corr_frac', '.3f')
            for rt in ['m', 'n', 'mn']
            for st in ['0', '1', '']
        ] +
        [
            (rt + '_' + t[0], t[1])
            for t in [('avg_read_len_all', '.0f'),
                      ('avg_read_len_m2_aln', '.0f'),
                      ('avg_read_len_corr', '.0f')]
            for rt in ['m0', 'm1', 'm2', 'n0', 'n1']
        ] +
        [
            (rt + '_' + t[0], t[1])
            for t in [('aln_frac', '.3f'),
                      ('idn_frac', '.3f'),
                      ('mism_frac', '.3f'),
                      ('ins_frac', '.3f'),
                      ('del_frac', '.3f')]
            for rt in ['m0', 'm1', 'm2', 'n0', 'n1', 'm', 'n']
        ]
    )
    #logger.debug('h: ' + str(h))
    # header
    print('\t'.join(h.keys()))
    for a in arrays:
        v = collections.defaultdict(float)
        total_reads = a.size
        v['total_reads'] = total_reads
        v['avg_events'] = np.mean(a['num_events'])

        m_hairpin_v = (a['hairpin_pos'] > 0)
        v['m_hairpin_frac'] = sum(m_hairpin_v) / total_reads
        a_m_hairpin = a[m_hairpin_v]
        n_hairpin_v = (a['complement_start_idx'] > 0)
        v['n_hairpin_frac'] = sum(n_hairpin_v) / total_reads
        a_n_hairpin = a[n_hairpin_v]
        a_mn_hairpin = a[m_hairpin_v & n_hairpin_v]
        good_hairpin_v = abs(a_mn_hairpin['hairpin_pos']
                             - (a_mn_hairpin['template_end_idx'] + a_mn_hairpin['complement_start_idx'])/2) < 100
        v['common_hairpin_frac'] = sum(good_hairpin_v) / total_reads

        v['m0_avg_events'] = np.mean(a_m_hairpin['m0_end_idx'] - a_m_hairpin['m0_start_idx'])
        v['m1_avg_events'] = np.mean(a_m_hairpin['m1_end_idx'] - a_m_hairpin['m1_start_idx'])
        v['n0_avg_events'] = np.mean(a_n_hairpin['template_end_idx'] - a_n_hairpin['template_start_idx'])
        v['n1_avg_events'] = np.mean(a_n_hairpin['complement_end_idx'] - a_n_hairpin['complement_start_idx'])

        m2_corr_v = a['m2'] == 0
        v['m2_corr_v'] = m2_corr_v
        good_reads = sum(m2_corr_v)
        v['m2_aln_frac'] = good_reads / total_reads
        if good_reads > 0:
            m0_corr_v = m2_corr_v & (a['m0'] == 0)
            m1_corr_v = m2_corr_v & (a['m1'] == 0)
            n0_corr_v = m2_corr_v & (a['n0'] == 0)
            n1_corr_v = m2_corr_v & (a['n1'] == 0)
            v['m0_corr_v'] = m0_corr_v
            v['m1_corr_v'] = m1_corr_v
            v['m_corr_v'] = m0_corr_v & m1_corr_v
            v['n0_corr_v'] = n0_corr_v
            v['n1_corr_v'] = n1_corr_v
            v['n_corr_v'] = n0_corr_v & n1_corr_v
            v['m0_corr_frac']   = sum(m0_corr_v) / good_reads
            v['m1_corr_frac']   = sum(m1_corr_v) / good_reads
            v['m_corr_frac']    = sum(m0_corr_v & m1_corr_v) / good_reads
            v['n0_corr_frac']   = sum(n0_corr_v) / good_reads
            v['n1_corr_frac']   = sum(n1_corr_v) / good_reads
            v['n_corr_frac']    = sum(n0_corr_v & n1_corr_v) / good_reads
            v['mn0_corr_frac']  = sum(m0_corr_v & n0_corr_v) / good_reads
            v['mn1_corr_frac']  = sum(m1_corr_v & n1_corr_v) / good_reads
            mn_corr_v = m0_corr_v & n0_corr_v & m1_corr_v & n1_corr_v
            v['mn_corr_frac']   = sum(mn_corr_v) / good_reads
            a_mn_corr = a[mn_corr_v]

            for rt in ['m0', 'm1', 'm2', 'n0', 'n1']:
                v[rt + '_avg_read_len_all'] = np.mean(a[a[rt + '_read_len'] > 0][rt + '_read_len'])
                v[rt + '_avg_read_len_m2_aln'] = np.mean(a[m2_corr_v][a[m2_corr_v][rt + '_read_len'] > 0][rt + '_read_len'])

                a_rt_corr = a[v[rt + '_corr_v']]
                total_read_len = sum(a_rt_corr[rt + '_read_len'])
                total_aln_len  = sum(a_rt_corr[rt + '_aln_len'])
                total_errors   = sum(a_rt_corr[rt + '_errors'])
                total_mism     = sum(a_rt_corr[rt + '_mism'])
                total_ins      = sum(a_rt_corr[rt + '_ins'])
                total_del      = sum(a_rt_corr[rt + '_del'])

                v[rt + '_avg_read_len_corr'] = np.mean(a_rt_corr[rt + '_read_len'])
                v[rt + '_aln_frac'] = total_aln_len / total_read_len
                v[rt + '_idn_frac'] = 1 - total_errors / (total_aln_len + total_del)
                v[rt + '_mism_frac'] = total_mism / (total_aln_len + total_del)
                v[rt + '_ins_frac'] = total_ins / (total_aln_len + total_del)
                v[rt + '_del_frac'] = total_del / (total_aln_len + total_del)

            for rt in ['m', 'n']:
                a_rt_corr = a[v[rt + '_corr_v']]
                total_read_len = 0
                total_aln_len = 0
                total_errors = 0
                total_mism = 0
                total_ins = 0
                total_del = 0
                for st in ['0', '1']:
                    total_read_len += sum(a_rt_corr[rt + st + '_read_len'])
                    total_aln_len  += sum(a_rt_corr[rt + st + '_aln_len'])
                    total_errors   += sum(a_rt_corr[rt + st + '_errors'])
                    total_mism     += sum(a_rt_corr[rt + st + '_mism'])
                    total_ins      += sum(a_rt_corr[rt + st + '_ins'])
                    total_del      += sum(a_rt_corr[rt + st + '_del'])

                v[rt + '_aln_frac'] = total_aln_len / total_read_len
                v[rt + '_idn_frac'] = 1 - total_errors / (total_aln_len + total_del)
                v[rt + '_mism_frac'] = total_mism / (total_aln_len + total_del)
                v[rt + '_ins_frac'] = total_ins / (total_aln_len + total_del)
                v[rt + '_del_frac'] = total_del / (total_aln_len + total_del)

        print('\t'.join((('{0:' + h[k] + '}').format(v[k]).lstrip('0') for k in h.keys())))

if __name__ == "__main__":
    description = """
Summarize mappings in each run.
    """
    parser = argparse.ArgumentParser(description=description, epilog='')
    parser.add_argument('--log-level', help='log level', action='store', default='info')
    parser.add_argument('input', nargs='*', default=['-'], help='Full table tsv file(s).')
    args = parser.parse_args()
    numeric_log_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_log_level, int):
        raise ValueError('Invalid log level: "%s"' % args.log_level)
    logging.basicConfig(level=numeric_log_level,
                        format='%(asctime)s %(name)s.%(levelname)s %(message)s',
                        datefmt='%Y/%m/%d %H:%M:%S')
    logger = logging.getLogger(os.path.basename(__file__))
    logger.debug('args: ' + str(args))

    arrays = list()
    for fn in args.input:
        if fn != '-':
            d = load_data(open(fn))
        else:
            d = load_data(sys.stdin)
        arrays.append(d)
    process_data(arrays, args)
