#!/usr/bin/env python3

import argparse
import collections
import itertools
import logging
import operator
import os
import sys

import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.colors
import matplotlib.ticker
import matplotlib.patches
import numpy as np

def thousands(x, pos):
    """The two args are the value and tick position"""
    return '%dk' % (x * 1e-3)

def all_equal(l):
    return len(l) == 0 or l.count(l[0]) == len(l)

def get_hairpin_pos(e, rt):
    if rt == 'm':
        return e['hairpin_pos']
    elif rt == 'n':
        if e['complement_start_idx'] > 0:
            return (e['template_end_idx'] + e['complement_start_idx']) / 2
        else:
            return 0

strand_name_dict = {
    0: 'Template',
    1: 'Complement'
}
rt_name_dict = {
    'n0': 'Nanocall Template',
    'n1': 'Nanocall Complement',
    'm0': 'Metrichor Template',
    'm1': 'Metrichor Complement',
    'm2': 'Metrichor 2D'
}
# measure properties
measure_props = {
    'scale': {
        'name': 'Scale',
        'limits': (0, 2),
        'ticks': np.arange(0, 2.01, .5),
        'minor_ticks': 2,
        'lambda': lambda e, rt: e[rt + '_scale']
        },
    'shift': {
        'name': 'Shift',
        'limits': (-10, 30),
        'ticks': np.arange(-10, 30.01, 10),
        'minor_ticks': 2,
        'lambda': lambda e, rt: e[rt + '_shift']
        },
    'read_len': {
        'name': 'Length',
        'limits': (0, 30000),
        'ticks': np.arange(0, 30001, 10000),
        'minor_ticks': 2,
        'formatter': matplotlib.ticker.FuncFormatter(thousands),
        'lambda': lambda e, rt: e[rt + '_read_len']
        },
    'frac_align': {
        'name': 'Fraction Aligned',
        'limits': (0, 1),
        'ticks': np.arange(0, 1.01, .2),
        'minor_ticks': 1,
        'lambda': lambda e, rt: e[rt + '_aln_len'] / e[rt + '_read_len']
        },
    'frac_identity': {
        'name': 'Identity',
        'limits': (0, 1),
        'ticks': np.arange(0, 1.01, .2),
        'minor_ticks': 1,
        'lambda': lambda e, rt: 1 - e[rt + '_errors'] / (e[rt + '_read_len'] + e[rt + '_del'])
        },
    'hairpin_pos': {
        'name': 'Hairpin Position',
        'limits': (0, 30000),
        'ticks': np.arange(0, 30001, 10000),
        'minor_ticks': 2,
        'formatter': matplotlib.ticker.FuncFormatter(thousands),
        'lambda': get_hairpin_pos
    }
}
# colormaps
cm_by_st = {
    0: 'Blues',
    1: 'Reds'
}
cm_by_rt = {
    'm0': 'Greens',
    'm1': 'Oranges',
    'm2': 'Greys',
    'n0': 'Blues',
    'n1': 'Reds'
}
# norm
bnd_nm = matplotlib.colors.BoundaryNorm([0] + [10**i for i in range(5)], 256)

# text font size
font_size = 14

def clear_fig(fig_id):
    if plt.fignum_exists(fig_id):
        plt.figure(fig_id)
        plt.clf()

def save_fig(prefix, args):
    for fmt in args.format:
        plt.savefig(prefix + '.' + fmt, dpi=args.dpi)
    plt.close()

def make_plot_measures(ax, ds, p, **kwargs):
    x_measure_name, x_rt, y_measure_name, y_rt, mask, cmap = p
    x_lbd = lambda e: measure_props[x_measure_name]['lambda'](e, x_rt)
    y_lbd = lambda e: measure_props[y_measure_name]['lambda'](e, y_rt)
    ax.set_xlim(measure_props[x_measure_name]['limits'], auto=False)
    ax.set_ylim(measure_props[y_measure_name]['limits'], auto=False)
    ax.set_xticks(measure_props[x_measure_name]['ticks'])
    ax.set_yticks(measure_props[y_measure_name]['ticks'])
    if ('formatter' in measure_props[x_measure_name]
        and ax.xaxis.get_major_formatter() != matplotlib.ticker.NullFormatter):
        ax.xaxis.set_major_formatter(measure_props[x_measure_name]['formatter'])
    if ('formatter' in measure_props[y_measure_name]
        and ax.yaxis.get_major_formatter() != matplotlib.ticker.NullFormatter):
        ax.yaxis.set_major_formatter(measure_props[y_measure_name]['formatter'])
    ax.xaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator(measure_props[x_measure_name]['minor_ticks']))
    ax.yaxis.set_minor_locator(matplotlib.ticker.AutoMinorLocator(measure_props[y_measure_name]['minor_ticks']))
    ax.grid(which='both')
    x = [x_lbd(e) for e in ds['table'][ds['mask'][mask]]]
    y = [y_lbd(e) for e in ds['table'][ds['mask'][mask]]]
    artist = ax.hexbin(x, y, gridsize=50, mincnt=1, linewidths=(0,),
                       extent=measure_props[x_measure_name]['limits'] + measure_props[y_measure_name]['limits'],
                       norm=bnd_nm, cmap=cmap, **kwargs)
    return artist

def make_figure_measures(fig_id, datasets, plot_list, sup_title=None, col_title=None, **kwargs):
    clear_fig(fig_id)
    fig, ax_a = plt.subplots(
        len(datasets) + 1, len(plot_list),
        sharex=False,
        sharey=False,
        squeeze=False,
        gridspec_kw={
            'height_ratios': [20] * len(datasets) + [1],
            'width_ratios': [1] * len(plot_list)
            },
        num=fig_id,
        figsize=(5 * len(plot_list), 5 * len(datasets) + .5),
        tight_layout=True,
    )
    if sup_title:
        #fig.suptitle(sup_title, fontsize=font_size)
        pass
    for i in range(len(datasets)):
        for j in range(len(plot_list)):
            ds = datasets[i]
            p = plot_list[j]
            ax = ax_a[i][j]
            artist = make_plot_measures(ax, ds, p, **kwargs)
            #if i == 0 and col_title:
            #    ax.set_title(col_title[j], fontsize=font_size)
            #if j == 0:
            #    ax.set_ylabel(ds['name'], fontsize=font_size)
            ax.set_aspect('equal', adjustable='box')
            ax.set_xlabel(p[1].upper() + ' ' + measure_props[p[0]]['name'], fontsize=font_size)
            ylabel = p[3].upper() + ' ' + measure_props[p[2]]['name']
            if j == 0:
                ylabel = ds['name'] +  '\n\n' + ylabel
            ax.set_ylabel(ylabel, fontsize=font_size)
            #if i < len(datasets) - 1:
            #    ax.set_xticklabels([], visible=False)
            #if j > 0 and all_equal([_p[2] for _p in plot_list]):
            #    ax.set_yticklabels([], visible=False)
            if i == len(datasets) - 1:
                cax = ax_a[len(datasets)][j]
                fig.colorbar(artist, cax=cax, orientation='horizontal')
    return fig

def make_figure_dataset_measures(fig_id, ds, plot_array,
                                 sup_title=None, col_title=None, row_title=None, **kwargs):
    clear_fig(fig_id)
    n = len(plot_array)
    m = len(plot_array[0])
    fig, ax_a = plt.subplots(
        n + 1, m,
        sharex=False,
        sharey=False,
        squeeze=False,
        gridspec_kw={
            'height_ratios': [20] * n + [1],
            'width_ratios': [1] * m
            },
        num=fig_id,
        figsize=(5 * m, 5 * n + .5),
        tight_layout=True,
    )
    if sup_title:
        #fig.suptitle(sup_title, fontsize=font_size)
        pass
    for i in range(n):
        for j in range(m):
            p = plot_array[i][j]
            ax = ax_a[i][j]
            artist = make_plot_measures(ax, ds, p, **kwargs)
            #if i == 0 and col_title:
            #    ax.set_title(col_title[j], fontsize=font_size)
            #if j == 0 and row_title:
            #    ax.set_ylabel(row_title[i], fontsize=font_size)
            ax.set_aspect('equal', adjustable='box')
            ax.set_xlabel(p[1].upper() + ' ' + measure_props[p[0]]['name'], fontsize=font_size)
            ax.set_ylabel(p[3].upper() + ' ' + measure_props[p[2]]['name'], fontsize=font_size)
            #if i < n - 1 and plot_array[i+1][j][0] == p[0]:
            #    ax.set_xticklabels([], visible=False)
            #if j > 0 and plot_array[i][j-1][2] == p[2]:
            #    ax.set_yticklabels([], visible=False)
            if i == n - 1:
                cax = ax_a[n][j]
                fig.colorbar(artist, cax=cax, orientation='horizontal')
    return fig

def make_figure_hairpin(fig_id, datasets, plot_array, **kwargs):
    clear_fig(fig_id)
    n = len(plot_array)
    m = len(plot_array[0])
    fig, ax_a = plt.subplots(
        n + 1, m,
        sharex=False,
        sharey=False,
        squeeze=False,
        gridspec_kw={
            'height_ratios': [20] * n + [1],
            'width_ratios': [1] * m
            },
        num=fig_id,
        figsize=(5 * m, 5 * n + .5),
        tight_layout=True,
    )
    for i in range(n):
        for j in range(m):
            ax = ax_a[i][j]
            if i == n - 1:
                cax = ax_a[n][j]
                fig.colorbar(artist, cax=cax, orientation='horizontal')
            ds_idx = plot_array[i][j][0]
            if ds_idx < 0:
                ax.axis('off')
                continue
            ds = datasets[ds_idx]
            p = plot_array[i][j][1:]
            artist = make_plot_measures(ax, ds, p, **kwargs)
            ax.set_aspect('equal', adjustable='box')
            ax.set_xlabel(p[1].upper() + ' ' + measure_props[p[0]]['name'], fontsize=font_size)
            ax.set_ylabel(ds['name'] + '\n\n' + p[3].upper() + ' ' + measure_props[p[2]]['name'], fontsize=font_size)
    return fig

def load_full_table(fn):
    a = np.genfromtxt(fn, names=True, dtype=None)
    m = dict()
    m['m_hairpin'] = (a['hairpin_pos'] > 0)
    m['n_hairpin'] = (a['complement_start_idx'] > 0)
    m['mn_hairpin'] = m['m_hairpin'] & m['n_hairpin']
    m['same_complement_model'] = a['m1_model_name'] == a['n1_model_name']
    m['m2_good']  = (a['m2'] == 0)
    m['m0_good']  = m['m2_good'] & (a['m0'] == 0)
    m['m1_good']  = m['m2_good'] & (a['m1'] == 0)
    m['n0_good']  = m['m2_good'] & (a['n0'] == 0)
    m['n1_good']  = m['m2_good'] & (a['n1'] == 0)
    m['m_good']   = m['m0_good'] & m['m1_good']
    m['n_good']   = m['n0_good'] & m['n1_good']
    m['mn0_good'] = m['m0_good'] & m['n0_good']
    m['mn1_good'] = m['m1_good'] & m['n1_good']
    m['mn_good']  = m['m_good']  & m['n_good']
    return a, m

def load_data(ds_l):
    datasets = list()
    for ds_n, ds_fn in ds_l:
        d = dict()
        d['name'] = ds_n
        d['table'], d['mask'] = load_full_table(ds_fn)
        datasets.append(d)
    return datasets

if __name__ == "__main__" and "__file__" in globals():
    description = """
    Create nanocall analysis plots
    """
    parser = argparse.ArgumentParser(description=description, epilog='')
    parser.add_argument('--log-level', help='log level', default='info')
    parser.add_argument('-d', '--dataset', nargs=2, action='append', default=[], help='Dataset: name, full summary file.')
    parser.add_argument('--format', help='Matplotlib output format', action='append', default=[])
    parser.add_argument('--dpi', help='Output DPI', type=int, default=300)
    args = parser.parse_args()

    if len(args.format) == 0:
        args.format.append('png')
    numeric_log_level = getattr(logging, args.log_level.upper(), None)
    if not isinstance(numeric_log_level, int):
        raise ValueError('Invalid log level: "%s"' % args.log_level)
    logging.basicConfig(level=numeric_log_level,
                        format='%(asctime)s %(name)s.%(levelname)s %(message)s',
                        datefmt='%Y/%m/%d %H:%M:%S')
    logger = logging.getLogger(os.path.basename(__file__))
    logger.debug('args: ' + str(args))

    # read data
    datasets = load_data(args.dataset)

    # make hairpin pos plot
    fig_name = 'figure_hairpin'
    l = [i for i in range(len(datasets))]
    if len(l) > 1 and len(l) % 2 > 0:
        l += [-1]
    logger.debug('l: ' + str(l))
    cols = [1, 2][len(l) > 1]
    logger.debug('cols: ' + str(cols))
    la = np.array(l).reshape(len(l) / cols, cols)
    make_figure_hairpin(fig_name, datasets,
                        [[(la[i][j],
                           'hairpin_pos', 'm',
                           'hairpin_pos', 'n',
                           'mn_hairpin',
                           'Greys') for j in range(la.shape[1])]
                        for i in range(la.shape[0])],
    )
    save_fig(fig_name, args)

    # plot frac align vs identity
    make_figure_measures(0, datasets,
                         [('frac_identity', rt,
                           'frac_align', rt,
                           'mn_good',
                           cm_by_rt[rt])
                          for rt in ['n0', 'n1', 'm0', 'm1', 'm2']],
                         sup_title='Fraction Aligned vs Identity',
                         col_title=[rt_name_dict[rt] for rt in ['n0', 'n1', 'm0', 'm1', 'm2']])
    fig_name = 'figure_aln_vs_id'
    save_fig(fig_name, args)

    # plot nanocall vs metrichor measures
    for measure_name in ['read_len', 'frac_align', 'frac_identity']:
        for vs2d in [0, 1]:
            fig_name = 'figure_' + measure_name + ['', '_vs2d'][vs2d]
            make_figure_measures(fig_name, datasets,
                                 [(measure_name, ['m' + str(st), 'm2'][vs2d],
                                   measure_name, 'n' + str(st),
                                   'mn_good',
                                   cm_by_st[st])
                                  for st in [0, 1]],
                                 sup_title=measure_props[measure_name]['name'] + ': Nanocall vs Metrichor' + ['', ' 2D'][vs2d],
                                 col_title=[strand_name_dict[st] for st in [0, 1]])
            save_fig(fig_name, args)

    # plot nanocall vs metrichor params
    for param_name in ['scale', 'shift']:
        fig_name = 'figure_'  + param_name
        make_figure_measures(fig_name, datasets,
                             [(param_name, 'm' + str(st),
                               param_name, 'n' + str(st),
                               'same_complement_model',
                               cm_by_st[st])
                              for st in [0, 1]],
                             sup_title=measure_props[param_name]['name'] + ': Nanocall vs Metrichor',
                             col_title=[strand_name_dict[st] for st in [0, 1]])
        save_fig(fig_name, args)

    # make dataset params plots
    for i in range(len(datasets)):
        ds = datasets[i]
        fig_name = 'figure_' + ds['name'].lower().replace(' ', '_') + '_params'
        make_figure_dataset_measures(fig_name, ds,
                                     [[(measure_name, 'm' + str(st),
                                        measure_name, 'n' + str(st),
                                        'same_complement_model',
                                        cm_by_st[st])
                                      for st in [0, 1]]
                                      for measure_name in ['scale', 'shift']],
                                     sup_title=datasets[i]['name'] + ': Nanocall vs Metrichor',
                                     col_title=[strand_name_dict[st]
                                                for st in [0, 1]],
                                     row_title=[measure_props[measure_name]['name']
                                                for measure_name in ['scale', 'shift']])
        save_fig(fig_name, args)

    # make dataset measure plots
    for i in range(len(datasets)):
        ds = datasets[i]
        fig_name = 'figure_' + ds['name'].lower().replace(' ', '_') + '_measures'
        make_figure_dataset_measures(fig_name, ds,
                                     [[(measure_name, 'm' + [str(st), '2'][vs2d],
                                        measure_name, 'n' + str(st),
                                        'mn_good',
                                        cm_by_st[st])
                                       for st in [0, 1]]
                                      for measure_name in ['frac_identity', 'read_len', 'frac_align']
                                      for vs2d in [0, 1]],
                                     sup_title=datasets[i]['name'] + ': Nanocall vs Metrichor',
                                     col_title=[strand_name_dict[st]
                                                for st in [0, 1]],
                                     row_title=[measure_props[measure_name]['name'] + ['', ' vs 2D'][vs2d]
                                                for measure_name in ['frac_identity', 'read_len', 'frac_align']
                                                for vs2d in [0, 1]])
        save_fig(fig_name, args)
        for st in range(2):
            fig_name = 'figure_' + ds['name'].lower().replace(' ', '_') + '_measures_' + strand_name_dict[st].lower()
            make_figure_dataset_measures(fig_name, ds,
                                         [[(measure_name, 'm' + [str(st), '2'][vs2d],
                                            measure_name, 'n' + str(st),
                                            'mn_good',
                                            cm_by_st[st])
                                           for vs2d in [0, 1]]
                                          for measure_name in ['frac_identity', 'read_len', 'frac_align']],
                                         sup_title=datasets[i]['name'] + ': Nanocall vs Metrichor',
                                         col_title=['vs 1D', 'vs 2D'],
                                         row_title=[measure_props[measure_name]['name']
                                                    for measure_name in ['frac_identity', 'read_len', 'frac_align']])
            save_fig(fig_name, args)
